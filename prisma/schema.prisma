generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          UserRole     @default(USER)
  comments      Comment[]
  evaluations   Evaluation[]
  memberships   Membership[]
  projects      Project[]    @relation("ProjectOwner")
  assignedTasks Task[]       @relation("TaskAssigned")
  createdTasks  Task[]       @relation("TaskCreator")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        ProjectType
  status      ProjectStatus @default(IN_PROGRESS)
  ownerId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  checklists  Checklist[]
  evaluations Evaluation[]
  memberships Membership[]
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  webpages    Webpage[]
}

model Membership {
  id        String     @id @default(cuid())
  userId    String
  projectId String
  role      MemberRole
  createdAt DateTime   @default(now())
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Checklist {
  id          String        @id @default(cuid())
  title       String
  description String?
  projectId   String
  type        ChecklistType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  criteria    Criterion[]
  evaluations Evaluation[]
}

model Criterion {
  id                String             @id @default(cuid())
  title             String
  description       String?
  checklistId       String
  category          String?
  weight            Float              @default(1.0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  checklist         Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  evaluationResults EvaluationResult[]
}

model Evaluation {
  id          String             @id @default(cuid())
  title       String
  description String?
  projectId   String
  checklistId String
  evaluatorId String
  status      EvaluationStatus   @default(IN_PROGRESS)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  checklist   Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  evaluator   User               @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  results     EvaluationResult[]
  tasks       Task[]
}

model EvaluationResult {
  id           String     @id @default(cuid())
  evaluationId String
  criterionId  String
  score        Float?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  criterion    Criterion  @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, criterionId])
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  priority     TaskPriority @default(MEDIUM)
  status       TaskStatus   @default(TODO)
  projectId    String
  creatorId    String
  assigneeId   String?
  evaluationId String?
  dueDate      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  comments     Comment[]
  assignee     User?        @relation("TaskAssigned", fields: [assigneeId], references: [id])
  creator      User         @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  evaluation   Evaluation?  @relation(fields: [evaluationId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webpage {
  id        String   @id @default(cuid())
  url       String
  title     String?
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  EVALUATOR
}

enum ProjectType {
  WEB
  MOBILE
  DESKTOP
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  EVALUATOR
  VIEWER
}

enum ChecklistType {
  USABILITY
  ACCESSIBILITY
  PERFORMANCE
  SECURITY
  CUSTOM
}

enum EvaluationStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
}
