generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           String          @default("USER")
  comments       Comment[]
  evaluations    Evaluation[]
  forms          Form[]          @relation("FormCreator")
  forumResponses ForumResponse[]
  forumTopics    ForumTopic[]
  memberships    Membership[]
  projects       Project[]       @relation("ProjectOwner")
  createdTasks   Task[]          @relation("TaskCreator")
  assignedTasks  Task[]          @relation("TaskAssigned")
  templates      Template[]
  submittedApplications Application[] @relation("SubmittedApplications")
  reviewedApplications  Application[] @relation("ReviewedApplications")
}

model Project {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        String
  status      String       @default("IN_PROGRESS")
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  checklists  Checklist[]
  evaluations Evaluation[]
  memberships Membership[]
  owner       User         @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  webpages    Webpage[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  role      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Checklist {
  id          String       @id @default(cuid())
  title       String
  description String?
  projectId   String
  type        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  criteria    Criterion[]
  evaluations Evaluation[]
}

model Criterion {
  id                String             @id @default(cuid())
  title             String
  description       String?
  checklistId       String
  category          String?
  weight            Float              @default(1.0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  checklist         Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  evaluationResults EvaluationResult[]
}

model Evaluation {
  id          String             @id @default(cuid())
  title       String
  description String?
  projectId   String
  checklistId String
  evaluatorId String
  status      String             @default("IN_PROGRESS")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  evaluator   User               @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)
  checklist   Checklist          @relation(fields: [checklistId], references: [id], onDelete: Cascade)
  results     EvaluationResult[]
  tasks       Task[]
}

model EvaluationResult {
  id           String     @id @default(cuid())
  evaluationId String
  criterionId  String
  score        Float?
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  evaluation   Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  criterion    Criterion  @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([evaluationId, criterionId])
}

model Task {
  id           String      @id @default(cuid())
  title        String
  description  String?
  priority     String      @default("MEDIUM")
  status       String      @default("TODO")
  projectId    String
  creatorId    String
  assigneeId   String?
  evaluationId String?
  dueDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  comments     Comment[]
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  evaluation   Evaluation? @relation(fields: [evaluationId], references: [id])
  creator      User        @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  assignee     User?       @relation("TaskAssigned", fields: [assigneeId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Webpage {
  id        String   @id @default(cuid())
  url       String
  title     String?
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Form {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String
  status      String     @default("DRAFT")
  creatorId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creator     User       @relation("FormCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  templates   Template[] @relation("TemplateForm")
}

model Question {
  id          String           @id @default(cuid())
  text        String
  description String?
  type        String
  required    Boolean          @default(false)
  formId      String
  order       Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  form        Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  options     QuestionOption[]
}

model QuestionOption {
  id         String   @id @default(cuid())
  text       String
  questionId String
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  creatorId   String
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  forms       Form[]   @relation("TemplateForm")
}

model Application {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String
  status      String    @default("Pendente")
  url         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  submitterId String
  reviewerId  String?
  submitter   User      @relation("SubmittedApplications", fields: [submitterId], references: [id])
  reviewer    User?     @relation("ReviewedApplications", fields: [reviewerId], references: [id])
}

model KnowledgeCategory {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  articles    KnowledgeArticle[]
}

model KnowledgeArticle {
  id         String             @id @default(cuid())
  title      String
  content    String
  categoryId String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  category   KnowledgeCategory? @relation(fields: [categoryId], references: [id])
}

model ForumCategory {
  id          String       @id @default(cuid())
  name        String
  description String?
  slug        String       @unique
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  topics      ForumTopic[]
}

model ForumTopic {
  id         String          @id @default(cuid())
  title      String
  content    String
  slug       String
  categoryId String
  authorId   String
  isPinned   Boolean         @default(false)
  isClosed   Boolean         @default(false)
  views      Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  responses  ForumResponse[]
  author     User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   ForumCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

model ForumResponse {
  id        String     @id @default(cuid())
  content   String
  topicId   String
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  topic     ForumTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)
}
